<?php
include_once '../BLL/bankLogikk.php';
include_once '../DAL/bankDatabaseStub.php';
include_once '../Model/domeneModell.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-31 at 15:45:05.
 */
class BankTest extends PHPUnit_Framework_TestCase {

    /**
     * @covers Bank::hentTransaksjoner
     * @todo   Implement testHentTransaksjoner().
     */
    public function testHentTransaksjoner() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kontoNr = 20516947845;
        $fraDato = '2015-03-26';
        $tilDato = '2015-03-30';
        //act
        $konto = $bankLogikk->hentTransaksjoner($kontoNr, $fraDato, $tilDato);
        //assert
        $this->assertEquals("010101234567",$konto->personnummer); 
        $this->assertEquals($kontoNr,$konto->kontonummer);
        $this->assertEquals("Sparekonto",$konto->type);
        $this->assertEquals(2300.34,$konto->saldo); 
        $this->assertEquals("NOK",$konto->valuta);
        $this->assertEquals('2015-03-26',$konto->transaksjoner[0]->dato);
        $this->assertEquals(134.4,$konto->transaksjoner[0]->transaksjonBelop);
        $this->assertEquals("22342344556",$konto->transaksjoner[0]->fraTilKontonummer);
        $this->assertEquals("Meny Holtet",$konto->transaksjoner[0]->melding);
        $this->assertEquals('2015-03-27',$konto->transaksjoner[1]->dato);
        $this->assertEquals(-2056.45,$konto->transaksjoner[1]->transaksjonBelop);
        $this->assertEquals("114342344556",$konto->transaksjoner[1]->fraTilKontonummer);
        $this->assertEquals("Husleie",$konto->transaksjoner[1]->melding);
        $this->assertEquals('2015-03-29',$konto->transaksjoner[2]->dato);
        $this->assertEquals(1454.45,$konto->transaksjoner[2]->transaksjonBelop);
        $this->assertEquals("114342344511",$konto->transaksjoner[2]->fraTilKontonummer);
        $this->assertEquals("Lekeland",$konto->transaksjoner[2]->melding);
    }

    /**
     * @covers Bank::sjekkLoggInn
     * @todo   Implement testSjekkLoggInn().
     */
    public function testSjekkLoggInn() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = "01016522344";
        $passord = "KariOlsen65";                
        //act
        $OK = $bankLogikk->sjekkLoggInn($personnummer, $passord);
        //assert
        $this->assertEquals("OK", $OK);
    }
    
    public function testSjekkLoggInnFEIL() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = "01016522344";
        $passord = "KariOlsen6";                
        //act
        $OK = $bankLogikk->sjekkLoggInn($personnummer, $passord);
        //assert
        $this->assertEquals("Feil", $OK);
    }
    
    
    
    public function testSjekkLoggInnPregPersonnummer() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = "0101652234";
        $passord = "KariOlsen65";                
        //act
        $OK = $bankLogikk->sjekkLoggInn($personnummer, $passord);
        //assert
        $this->assertEquals("Feil i personnummer", $OK);
    }
    public function testSjekkLoggInnPregPersonnummerForLangt() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = "01016522340101652234";
        $passord = "KariOlsen65";                
        //act
        $OK = $bankLogikk->sjekkLoggInn($personnummer, $passord);
        //assert
        $this->assertEquals("Feil i personnummer", $OK);
    }
    
    public function testSjekkLoggInnPregPassordForKort() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer = "01016522344";
        $kunde->fornavn = "Kari";
        $kunde->etternavn = "Olsen";
        $kunde->adresse = "Jallaveien 69";
        $kunde->postnr = "6969";
        $kunde->poststed = "Oslo";
        $kunde->telefonnr = "23657493";
        $kunde->passord = "Kari";                
        //act
        $OK = $bankLogikk->sjekkLoggInn($kunde->personnummer, $kunde->passord);
        //assert
        $this->assertEquals("Feil i passord", $OK);
    }
    
    public function testSjekkLoggInnPregPassordForLangt() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer = "01016522344";
        $kunde->fornavn = "Kari";
        $kunde->etternavn = "Olsen";
        $kunde->adresse = "Jallaveien 69";
        $kunde->postnr = "6969";
        $kunde->poststed = "Oslo";
        $kunde->telefonnr = "23657493";
        $kunde->passord = "KariOlsen65Jallaveien69Oslo23657493";                
        //act
        $OK = $bankLogikk->sjekkLoggInn($kunde->personnummer, $kunde->passord);
        //assert
        $this->assertEquals("Feil i passord", $OK);
    }

    /**
     * @covers Bank::hentKonti
     * @todo   Implement testHentKonti().
     */
    public function testHentKonti() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = 01016522344;        
        //act
        $konto = $bankLogikk->hentKonti($personnummer);
        //assert
        $this->assertEquals("010101234567", $konto->personnummer);
        $this->assertEquals("20516947845", $konto->kontonummer);
        $this->assertEquals("Sparekonto", $konto->type);
        $this->assertEquals("2300.34", $konto->saldo);
        $this->assertEquals("NOK", $konto->valuta);
    }
    
    public function testHentKontiFeil(){
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = -01016522344;  
        //act
        $konto = $bankLogikk->hentKonti($personnummer);
        //assert
        $this->assertEquals("Feil", $konto);
    }

    /**
     * @covers Bank::hentSaldi
     * @todo   Implement testHentSaldi().
     */
    public function testHentSaldi() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = 01016522344;  
        //act
        $saldi = $bankLogikk->hentSaldi($personnummer);
        //assert
        $this->assertEquals("2300.34",$saldi->saldo);
    }
    
    public function testHentSaldiFEIL() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = -01016522344;  
        //act
        $saldi = $bankLogikk->hentSaldi($personnummer);
        //assert
        $this->assertEquals("Feil",$saldi);
    }

    /**
     * @covers Bank::registrerBetaling
     * @todo   Implement testRegistrerBetaling().
     */
    public function testRegistrerBetaling() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kontoNr = 01016522344;  
        $transaksjon = new transaksjon();
        $transaksjon->fraTilKontonummer = "01016522345";
        $transaksjon->transaksjonBelop = 2500;
        $transaksjon->dato = "2015-03-05";
        $transaksjon->melding = "Tilbakebetaling for ferie.";
        //act
        $OK = $bankLogikk->registrerBetaling($kontoNr, $transaksjon);
        //assert
        $this->assertEquals("OK",$OK);
    }
    
    public function testRegistrerBetalingFEIL() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kontoNr = -01016522344;  
        $transaksjon = new transaksjon();
        $transaksjon->fraTilKontonummer = "01016522345";
        $transaksjon->transaksjonBelop = 2500;
        $transaksjon->dato = "2015-03-05";
        $transaksjon->melding = "Tilbakebetaling for ferie.";
        //act
        $OK = $bankLogikk->registrerBetaling($kontoNr, $transaksjon);
        //assert
        $this->assertEquals("Feil",$OK);
    }

    /**
     * @covers Bank::hentBetalinger
     * @todo   Implement testHentBetalinger().
     */
    public function testHentBetalinger() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bank::utforBetaling
     * @todo   Implement testUtforBetaling().
     */
    public function testUtforBetaling() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Bank::endreKundeInfo
     * @todo   Implement testEndreKundeInfo().
     */
    public function testEndreKundeInfo() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer=010101234567;
        $kunde->fornavn = "Kari";
        $kunde->etternavn = "Olsen";
        $kunde->adresse = "Jallaveien 69";
        $kunde->postnr = "6969";
        $kunde->poststed = "Oslo";
        $kunde->telefonnr = "23657493";
        $kunde->passord = "KariOlsen65";
        //act
        $OK = $bankLogikk->endreKundeInfo($kunde);
        //assert
        $this->assertEquals("OK", $OK);
    }
    
    public function testEndreKundeInfoFEIL() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer=-010101234567;
        $kunde->fornavn = "Kari";
        $kunde->etternavn = "Olsen";
        $kunde->adresse = "Jallaveien 69";
        $kunde->postnr = "6969";
        $kunde->poststed = "Oslo";
        $kunde->telefonnr = "23657493";
        $kunde->passord = "KariOlsen65";
        //act
        $OK = $bankLogikk->endreKundeInfo($kunde);
        //assert
        $this->assertEquals("Feil", $OK);
    }

    /**
     * @covers Bank::hentKundeInfo
     * @todo   Implement testHentKundeInfo().
     */
    public function testHentKundeInfo() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = 010101234567;
        //act
        $kunde = $bankLogikk->hentKundeInfo($personnummer);
        //assert
        $this->assertEquals(010101234567,$kunde->personnummer);
        $this->assertEquals("Kari",$kunde->fornavn);
        $this->assertEquals("Olsen",$kunde->etternavn);
        $this->assertEquals("Jallaveien 69",$kunde->adresse);
        $this->assertEquals("6969",$kunde->postnr);
        $this->assertEquals("Oslo",$kunde->poststed);
        $this->assertEquals("23657493",$kunde->telefonnr);
        $this->assertEquals("KariOlsen65",$kunde->passord);
    }
    
    public function testHentKundeInfoIngenKundeMedPersonnummer() {
        //arrange
        $bankLogikk = new Bank(new DBStub());
        $personnummer = -010101234567;
        //act
        $kunde = $bankLogikk->hentKundeInfo($personnummer);
        //assert
        $this->assertEquals("Feil",$kunde);
    }

}
