<?php
include_once '../BLL/adminLogikk.php';
include_once '../DAL/adminDatabaseStub.php';
include_once '../Model/domeneModell.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-01-31 at 15:54:01.
 */
class AdminTest extends PHPUnit_Framework_TestCase {

    /*
     * @covers Admin::hentAlleKunder
     * @todo   Implement testEndreKundeInfo().
     */    
    public function testHentAlleKunder() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        //act
        $kunder = $adminLogikk->hentAlleKunder();
        //assert
        $this->assertEquals("01010122344",$kunder[0]->personnummer);
        $this->assertEquals("Per Olsen",$kunder[0]->navn);
        $this->assertEquals("Osloveien 82 0270 Oslo",$kunder[0]->adresse);
        $this->assertEquals("12345678",$kunder[0]->telefonnr);
        $this->assertEquals("01010122344",$kunder[1]->personnummer);
        $this->assertEquals("Line Jensen",$kunder[1]->navn);
        $this->assertEquals("Askerveien 100, 1379 Asker",$kunder[1]->adresse);
        $this->assertEquals("92876789",$kunder[1]->telefonnr);
        $this->assertEquals("02020233455",$kunder[2]->personnummer);
        $this->assertEquals("Ole Olsen",$kunder[2]->navn);
        $this->assertEquals("Berumsveien 23, 1234 Berum",$kunder[2]->adresse);
        $this->assertEquals("99889988",$kunder[2]->telefonnr);                
    }

    /**
     * @covers Admin::endreKundeInfo
     * @todo   Implement testEndreKundeInfo().
     */
    public function testEndreKundeInfo() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer = "15058139781";
        $kunde->navn = "Jannike Storo";
        $kunde->adresse = "Haugerudveien 43 4718 Oslo";
        $kunde->telefonnr = "22486198";
        //act
        $OK = $adminLogikk->endreKundeInfo($kunde);
        //assert
        $this->assertEquals("OK", $OK);
    }    
    
    public function testEndreKundeInfoFEIL() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer = "15058139780";
        $kunde->navn = "Jannike Storo";
        $kunde->adresse = "Haugerudveien 43 4718 Oslo";
        $kunde->telefonnr = "22486198";
        //act
        $OK = $adminLogikk->endreKundeInfo($kunde);
        //assert
        $this->assertEquals("Feil", $OK);
    }
   
    /**
     * @covers Admin::registrerKunde
     * @todo   Implement testRegistrerKunde().
     */
    public function testRegistrerKunde() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer = "15058139781";
        $kunde->navn = "Jannike Storo";
        $kunde->adresse = "Haugerudveien 43 4718 Oslo";
        $kunde->telefonnr = "22486198";
        //act       
        $OK = $adminLogikk->registrerKunde($kunde);
        //assert
        $this->assertEquals("OK", $OK);      
        
    }
    
    public function testRegistrerKundeFEIL() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $kunde = new kunde();
        $kunde->personnummer = "15058139780";
        $kunde->navn = "Jannike Storo";
        $kunde->adresse = "Haugerudveien 43 4718 Oslo";
        $kunde->telefonnr = "22486198";
        //act       
        $OK = $adminLogikk->registrerKunde($kunde);
        //assert
        $this->assertEquals("Feil", $OK);      
        
    }

    /**
     * @covers Admin::slettKunde
     * @todo   Implement testSlettKunde().
     */
    public function testSlettKunde() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $personnummer = "15058139781";
        //act
        $OK = $adminLogikk->slettKunde($personnummer);
        //assert
        $this->assertEquals("OK", $OK);
        
    }
    
    public function testSlettKundeFEIL() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $personnummer = "15058139780";
        //act
        $OK = $adminLogikk->slettKunde($personnummer);
        //assert
        $this->assertEquals("Feil", $OK);
        
    }

    /**
     * @covers Admin::registrerKonto
     * @todo   Implement testRegistrerKonto().
     */
    public function testRegistrerKonto() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $konto = new konto();
        $konto->personnummer = "15058139781";
        $konto->kontonummer = "20160464023";
        $konto->saldo = "0";
        $konto->type = "Brukskonto";
        //act
        $OK = $adminLogikk->registrerKonto($konto);
        //assert
        $this->assertEquals("OK", $OK);
    }
    
    public function testRegistrerKontoFEIL() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $konto = new konto();
        $konto->personnummer = "15058139781";
        $konto->kontonummer = "20160464020";
        $konto->saldo = "0";
        $konto->type = "Brukskonto";
        //act
        $OK = $adminLogikk->registrerKonto($konto);
        //assert
        $this->assertEquals("Feil", $OK);
    }

    /**
     * @covers Admin::endreKonto
     * @todo   Implement testEndreKonto().
     */
    public function testEndreKonti() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $konto = new konto();
        $konto->kontonummer = "20160464023";
        $konto->personnummer = "15058139781";
        $konto->type = "Brukskonto";
        $konto->saldo = "0";
        //act
        $OK = $adminLogikk->endreKonto($konto);
        //assert
        $this->assertEquals("OK", $OK);
    }
    
    public function testEndreKontoFEIL() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $konto = new konto();
        $konto->kontonummer = "20160464020";
        $konto->personnummer = "15058139781";
        $konto->type = "Brukskonto";
        $konto->saldo = "0";
        //act
        $OK = $adminLogikk->endreKonto($konto);
        //assert
        $this->assertEquals("Feil", $OK);
    }

    /**
     * @covers Admin::hentAlleKonti
     * @todo   Implement testHentAlleKonti().
     */
    public function testHentAlleKonti() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        //act
        $konti = $adminLogikk->hentAlleKonti();
        //assert
        $this->assertEquals("15267839781", $konti[0]->personnummer);
        $this->assertEquals("21580625941", $konti[0]->kontonummer);
        $this->assertEquals("100,00", $konti[0]->saldo);
        $this->assertEquals("Brukskonto", $konti[0]->type);
        $this->assertEquals("Kroner", $konti[0]->valuta);
        $this->assertEquals("15267839782", $konti[1]->personnummer);
        $this->assertEquals("21580625942", $konti[1]->kontonummer);
        $this->assertEquals("200,00", $konti[1]->saldo);
        $this->assertEquals("Sparekonto", $konti[1]->type);
        $this->assertEquals("Kroner", $konti[1]->valuta);
        $this->assertEquals("15267839783", $konti[2]->personnummer);
        $this->assertEquals("21580625943", $konti[2]->kontonummer);
        $this->assertEquals("300,00", $konti[2]->saldo);
        $this->assertEquals("Kreditkonto", $konti[2]->type);
        $this->assertEquals("Kroner", $konti[2]->valuta);
    }

    /**
     * @covers Admin::slettKonto
     * @todo   Implement testSlettKonto().
     */
    public function testSlettKonto() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $kontonummer = 20160464023;
        //act
        $OK = $adminLogikk->slettKonto($kontonummer);
        //assert
        $this->assertEquals("OK", $OK);
    }
    
    public function testSlettKontoFEIL() {
        //arrange
        $adminLogikk = new Admin(new DBStub());
        $kontonummer = 20160464020;
        //act
        $OK = $adminLogikk->slettKonto($kontonummer);
        //assert
        $this->assertEquals("Feil", $OK);
    }

}
